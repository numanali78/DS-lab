#include <iostream>
#include <iomanip>
#include <conio.h>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class DLL {
public:
    Node* head;
    Node* tail;

    DLL() {
        head = nullptr;
        tail = nullptr;
    }

    ~DLL() {
        Node* current = head;
        while (current != nullptr) {
            Node* temp = current;
            current = current->next;
            delete temp;
        }
        head = nullptr;
        tail = nullptr;
        cout << "\nAll nodes deleted (Destructor called).\n";
    }

    void display() {
        if (head == nullptr) {
            cout << "\nList is empty.\n";
            return;
        }

        Node* temp = head;
        cout << "\nList elements: ";
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void Display() {
        Node* temp = head;
        cout << "\n------------------------------------------------------\n";
        cout << "     Prev Address        |   Data   |     Next Address |   Node Address\n";
        cout << "------------------------------------------------------\n";
        while (temp != nullptr) {
            cout << setw(20) << temp->prev
                 << " | " << setw(7) << temp->data
                 << " | " << setw(18) << temp->next
                 << " | " << setw(20) << temp
                 << endl;
            temp = temp->next;
        }
        cout << "------------------------------------------------------\n";
        cout << "Tail: " << tail << endl;
        cout << "------------------------------------------------------\n";
    }

    void insertAtBegin(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;

        if (head != nullptr)
            head->prev = newNode;

        head = newNode;

        if (tail == nullptr)
            tail = newNode;
    }

    void insertAtEnd(int value) {
        if (tail == nullptr) {
            insertAtBegin(value);
            return;
        }

        Node* newNode = new Node(value);
        tail->next = newNode;
        newNode->prev = tail;
        tail = newNode;
    }

    void insertAtPos(int pos, int value) {
        if (pos <= 0) {
            cout << "Invalid position!\n";
            return;
        }

        if (head == nullptr || pos == 1) {
            insertAtBegin(value);
            return;
        }

        Node* current = head;
        int index = 1;

        while (current->next != nullptr && index < pos - 1) {
            current = current->next;
            index++;
        }

        if (current->next == nullptr) {
            insertAtEnd(value);
            return;
        }

        Node* newNode = new Node(value);
        newNode->next = current->next;
        newNode->prev = current;
        current->next->prev = newNode;
        current->next = newNode;
    }

    void deleteFB() {
        if (head == nullptr) {
            cout << "\nList is empty.\n";
            return;
        }

        if (head->next == nullptr) {
            delete head;
            head = nullptr;
            tail = nullptr;
        } 
        else {
            Node* temp = head;
            head = head->next;
            head->prev = nullptr;
            delete temp;
        }

        cout << "\nFirst node deleted successfully.\n";
    }

    void DisplayNode(Node* node) {
        if (node == nullptr) {
            cout << "\nNode not found!\n";
            return;
        }

        cout << "\n------------------------------------------------------\n";
        cout << "     Prev Address        |   Data   |     Next Address |   Node Address\n";
        cout << "------------------------------------------------------\n";
        cout << setw(20) << node->prev
             << " | " << setw(7) << node->data
             << " | " << setw(18) << node->next
             << " | " << setw(20) << node
             << endl;
        cout << "------------------------------------------------------\n";
    }

    void search(int value) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == value) {
                cout << "\nNode found with value: " << value << endl;
                DisplayNode(temp);
                return;
            }
            temp = temp->next;
        }
        cout << "\nNode with value " << value << " not found.\n";
    }
};

int main() {
    DLL list;

    cout << "-------------------------------------------\n";
    cout << "   Doubly Linked List Program\n";
    cout << "-------------------------------------------\n";

    list.insertAtEnd(10);
    list.insertAtEnd(20);
    list.insertAtEnd(30);
    list.insertAtEnd(40);

    cout << "\nInitial List:";
    list.display();

    list.insertAtPos(5, 50);
    cout << "\nAfter inserting element at position 5:";
    list.display();

    list.Display();

    list.deleteFB();
    cout << "\nAfter deleting from beginning:";
    list.display();

    list.search(30);

    cout << "\nProgram finished successfully.\n";

    getch();
    return 0;
}
